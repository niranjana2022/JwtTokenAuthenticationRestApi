package com.eidiko.niranjana.controller;

import java.security.Principal;
import java.util.Date;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import com.eidiko.niranjana.model.TokenDetails;
import com.eidiko.niranjana.model.TokenResponse;
import com.eidiko.niranjana.model.User;
import com.eidiko.niranjana.model.UserRequest;
import com.eidiko.niranjana.service.IUserService;
import com.eidiko.niranjana.util.JwtUtil;
import com.fasterxml.jackson.databind.ObjectMapper;

import io.jsonwebtoken.Claims;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@RestController
@RequestMapping("/user")
public class UserRestController {

	@Autowired
	private JwtUtil util;
	@Autowired
	private IUserService service;
	@Autowired
	private AuthenticationManager authenticationManager;
	@Autowired
	RestTemplate restTemplate;
	
	@PostMapping("/save")
	public ResponseEntity<String> saveuser(@RequestBody User user)
	{
		Integer id  = service.saveUser(user);
		String body = "User "+id+" saved In DB";
		System.out.println(body);
		return new ResponseEntity<String>(body,HttpStatus.OK);
		
	}
	//generate token
	@PostMapping(value="/generateTokenUsinglogin") //( One way taking "BO class" as return type)
	public ResponseEntity<TokenResponse> loginUser(@RequestBody UserRequest request)
	{
		//validate username/password with database then only token will generate..else triggered to InvalidUserAuthEntryPoint
		authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(request.getUsername(), request.getPassword()));
		String token = util.generateToken(request.getUsername());
		return ResponseEntity.ok(new TokenResponse(token,"Successfully! Token generated by EIDIKO TEAM"));
	}
	
	@GetMapping(value="/generateTokenUsinglogin1") //( Second way taking "Object" as return type)
	public ResponseEntity<Object> loginUser1(@RequestBody UserRequest request)
	{
		try {
			//validate username/password with database then only token will generate..else triggered to InvalidUserAuthEntryPoint
			authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(request.getUsername(), request.getPassword()));
			String token = util.generateToken(request.getUsername());
			return ResponseEntity.status(HttpStatus.OK).body(token);
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.OK).body("Problem to generate token"+e.getMessage());	
		}
	}
	
//======================================================================================================	
	@PostMapping("/generateTokenUsingIDPWDInHeader")
	public ResponseEntity<String> generateTokenUsingIDPWDInHeader(@RequestHeader Map<String,String> header)
	{
		log.info("start generateToken");
		String status = "SUCCESS";
		ResponseEntity<String> tokenResponse = null;
		try {	
			//Here token is generate in Console only
			String username = header.get("username");
			log.info("username is :"+username);
			
			String password = header.get("password");
			log.info("password is :"+password);
			
			//Validate the username/password from DB then only token will generate....else triggered to InvalidUserAuthEntryPoint 
			authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(username, password));
			String tokenIs = util.generateToken(username);
			log.info("tokenIs :"+tokenIs);
		}
		catch(Exception e)
		{
			status = e.getMessage();
			log.error("Exception while Generating Token, status is: "+status);
			log.error("Exception while Generating Token, cause is: "+e.getCause());
			e.printStackTrace();
		}
		return tokenResponse;
	}
//=================================================================================
	
		
		@PostMapping("/generateTokenUsingIDPWDInHeaderBO")
		public ResponseEntity<TokenResponse> generateTokenUsingIDPWDInHeaderReturnTypeBO(@RequestHeader Map<String,String> header)
		{
			log.info("start generateToken");
			String status = "SUCCESS";
			ResponseEntity<TokenResponse> tokenResponse = null;
			try {	
				String username = header.get("username");
				log.info("username is :"+username);
				
				String password = header.get("password");
				log.info("password is :"+password);
				
				//Validate the username/password from DB then only token will generate....else triggered to InvalidUserAuthEntryPoint 
				authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(username, password));
				String tokenIs = util.generateToken(username);
				log.info("tokenIs :"+tokenIs);
				return ResponseEntity.ok(new TokenResponse(tokenIs,"Successfully! Token generated by EIDIKO TEAM"));
			}
			catch(Exception e)
			{
				status = e.getMessage();
				log.error("Exception while Generating Token, status is: "+status);
				log.error("Exception while Generating Token, cause is: "+e.getCause());
				e.printStackTrace();
			}
			return null;
		}
//=================================================================================
		@PostMapping("/generateTokenUsingIDPWDInPropertiesBO")
		public ResponseEntity<TokenResponse> generateTokenUsingIDPWDInPropertiesReturnTypeBO()
		{
			log.info("start generateToken");
			String status = "SUCCESS";
			ResponseEntity<TokenResponse> tokenResponse = null;
			try {	
				UserRequest user=new UserRequest();
				//user.setUsername("niranjanac"); //Hardcore
				user.setUsername(username);
				//user.setPassword("nira2022"); //Hardcore
				user.setPassword(password);
				log.info("user details is: "+user);
				//Validate the username/password from DB then only token will generate....else triggered to InvalidUserAuthEntryPoint 
				authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(username, password));
				String tokenIs = util.generateToken(username);
				log.info("tokenIs :"+tokenIs);
				return ResponseEntity.ok(new TokenResponse(tokenIs,"Successfully! Token generated by EIDIKO TEAM"));
			}
			catch(Exception e)
			{
				status = e.getMessage();
				log.error("Exception while Generating Token, status is: "+status);
				log.error("Exception while Generating Token, cause is: "+e.getCause());
				e.printStackTrace();
			}
			return null;
		}
	//===================================================================================================
		@PostMapping("/getTokenDetailsUsingTokenInHeader")
		public ResponseEntity<String> getTokenDetailsUsingTokenInHeader(@RequestHeader Map<String,String> header)
		{
			log.info("start validateToke");
			String status = "SUCCESS";
			ResponseEntity<String> tokenResponse = null;
			try {
				//Here we get token details in Console only
				String token = header.get("token");
				log.info("token is :"+token);
				
				Claims claim = util.getClaims(token);
				log.info("Token claim is :"+claim);
				
				Date tokenExpDate = util.getExpDate(token);
				log.info("tokenExpDate is :"+tokenExpDate);
				
				String tokenUsername = util.getUserName(token);
				log.info("token username :"+tokenUsername);
				
				boolean isValid = util.isTokenValidate(token, tokenUsername);
				log.info("isTokenValid :"+isValid);
			}
		catch(Exception e)
		{
			status = e.getMessage();
			log.error("Exception while Generating Token: "+status);
			log.error("Exception while Generating Token: "+e.getCause());
			e.printStackTrace();
		}
		return tokenResponse;
	  }
	//=================================================================================
		@PostMapping("/getTokenDetailsUsingTokenInHeaderBO")
		public ResponseEntity<TokenDetails> getTokenDetailsUsingTokenInHeaderReturnTypeBO(@RequestHeader Map<String,String> header)
		{
			log.info("start validateToke");
			String status = "SUCCESS";
			ResponseEntity<TokenDetails> tokenResponse = null;
			try {
				//we get details from a token
				String token = header.get("token");
				log.info("token is :"+token);
				
				Claims claim = util.getClaims(token);
				log.info("Token claim is :"+claim);
				
				Date tokenExpDate = util.getExpDate(token);
				log.info("tokenExpDate is :"+tokenExpDate);
				
				String tokenUsername = util.getUserName(token);
				log.info("token username :"+tokenUsername);
				
				boolean isValid = util.isTokenValidate(token, tokenUsername);
				log.info("isTokenValid :"+isValid);
				
				//we store token details inside a BO class and read that details and display in console
				TokenDetails tokenDetails = new TokenDetails();
				tokenDetails.setToken(token);
				tokenDetails.setClaim(claim);
				tokenDetails.setTokenExpDate(tokenExpDate);
				tokenDetails.setTokenValid(isValid);
				tokenDetails.setUsername(tokenUsername);
				log.info("tokenDetails :"+tokenDetails); //we can see the output in Console
				
				return ResponseEntity.ok(new TokenDetails(token, claim, tokenExpDate, tokenUsername, isValid));//we can see the output in Postman Response
			}
		catch(Exception e)
		{
			status = e.getMessage();
			log.error("Exception while Generating Token: "+status);
			log.error("Exception while Generating Token: "+e.getCause());
			e.printStackTrace();
		}
		return null;
	  }
		//=================================================================================
				@PostMapping("/getTokenDetailsUsingTokenInPropertiesBO")
				public ResponseEntity<TokenDetails> getTokenDetailsUsingTokenInPropertiesReturnTypeBO()
				{
					log.info("start validateToke");
					String status = "SUCCESS";
					ResponseEntity<TokenDetails> tokenResponse = null;
					try {
						Claims claim = util.getClaims(token);
						log.info("Token claim is :"+claim);
						
						Date tokenExpDate = util.getExpDate(token);
						log.info("tokenExpDate is :"+tokenExpDate);
						
						String tokenUsername = util.getUserName(token);
						log.info("token username :"+tokenUsername);
//						
						boolean isValid = util.isTokenValidate(token, tokenUsername);
						log.info("isTokenValid :"+isValid);
						
						//we store token details inside a BO class and read that details and display in console
						TokenDetails tokenDetails = new TokenDetails();
						tokenDetails.setToken(token);
						tokenDetails.setClaim(claim);
						tokenDetails.setTokenExpDate(tokenExpDate);
						tokenDetails.setTokenValid(isValid);
						tokenDetails.setUsername(tokenUsername);
						log.info("tokenDetails :"+tokenDetails); //we can see the output in Console
						
						return ResponseEntity.ok(new TokenDetails(token, claim, tokenExpDate, tokenUsername, isValid));//we can see the output in Postman Response
					}
				catch(Exception e)
				{
					status = e.getMessage();
					log.error("Exception while Generating Token: "+status);
					log.error("Exception while Generating Token: "+e.getCause());
					e.printStackTrace();
				}
				return null;
			  }
//=======================================================================================================
		@Value("${app.token}")
		private String token;
		@Value("${app.username}")
		private String username;
		@Value("${app.password}")
		private String password;
		@PostMapping("/generateToken")
		public ResponseEntity<String> generateToken()
		{
			log.info("start testToken");
			String status = "SUCCESS";
			String urlType = "http://localhost:2020/user/generateTokenUsinglogin";
			ResponseEntity<String> tokenResponse = null;
			try {			
				HttpHeaders headers = new HttpHeaders();
				headers.setContentType(MediaType.APPLICATION_JSON);
				log.info("header is :"+headers);
				UserRequest user=new UserRequest();
				//user.setUsername("niranjanac"); //Hardcore
				user.setUsername(username);
				//user.setPassword("nira2022"); //Hardcore
				user.setPassword(password);
				log.info("user details is: "+user);
				HttpEntity<?> request = new HttpEntity<>(user,headers);
				log.info("we get request details: "+request);
				 tokenResponse = restTemplate.exchange(urlType,HttpMethod.POST, request, String.class);
				log.info("response details as form of Java object:"+tokenResponse);
				//Convert Java class object to JSON object
				String str = tokenResponse.toString();
				ObjectMapper objectMapper = new ObjectMapper();
			     String javaToJson = objectMapper.writeValueAsString(str);
			     log.info("Convert Java data to Json Object is :"+javaToJson);
			}
			catch(Exception e)
			{
				status = e.getMessage();
				log.error("Exception while Generating Token: "+status);
				log.error("Exception while Generating Token: "+e.getCause());
				e.printStackTrace();
			}
			return tokenResponse;
		}
	//after login 
	@GetMapping("/tokenUsername")
	public ResponseEntity<String> accessData(Principal p)
	{
		return ResponseEntity.ok("Hello user :"+p.getName());
	}
	//to get tokenDetails
	@GetMapping(value="/tokenDetailsHardcore") 
	public ResponseEntity<Object> readTokenDetails()
	{
		try {
			String token = "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJuaXJhbmphbmFjIiwiaXNzIjoiRWlkaWtvIiwiaWF0IjoxNjU5Njc1MTUwLCJleHAiOjE2NTk2NzU3NTB9.f9qWPIzvTBwoSRVEWRHjDfmrwlO4t-vaotVxzCAKuOQ";
			Claims tokenDetails = util.getClaims(token);
			log.info("Token Expiration is :"+tokenDetails.getSubject());
			log.info("Token Issuer is :"+tokenDetails.getIssuer());
			log.info("Token id is :"+tokenDetails.getId());
			log.info("Token Expiration is :"+tokenDetails.getExpiration());
			return ResponseEntity.status(HttpStatus.OK).body(tokenDetails);
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.OK).body("Problem to getting token details"+e.getMessage());	
		}
	}
}
